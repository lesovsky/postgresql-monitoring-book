{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 4,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "P986A1B7135F49861"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unitScale": true
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "datname"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 77
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "blkd"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 74
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "tx_age"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 89
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "wait_age"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 111
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "wait"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 159
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "state"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 87
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pid"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 80
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "blocked_by"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 101
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "usename"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 124
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 26,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P986A1B7135F49861"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "with recursive activity as (\n    select\n        *,\n        pg_blocking_pids(pid) blocked_by,\n        age(clock_timestamp(), xact_start)::interval(0) as tx_age,\n        age(clock_timestamp(), (select max(l.waitstart) from pg_locks l where a.pid = l.pid))::interval(0) as wait_age\n    from pg_stat_activity a\n    where state is distinct from 'idle'\n), blockers as (\n    select array_agg(c) as pids from (select distinct unnest(blocked_by) from activity) as dt(c)\n), tree as (\n    select\n        activity.*,\n        1 as level,\n        activity.pid as top_blocker_pid,\n        array[activity.pid] as path,\n        array[activity.pid]::int[] as all_blockers_above\n    from activity, blockers\n    where\n            array[pid] <@ blockers.pids\n      and blocked_by = '{}'::int[]\n    union all\n    select\n        activity.*,\n        tree.level + 1 as level,\n        tree.top_blocker_pid,\n        path || array[activity.pid] as path,\n        tree.all_blockers_above || array_agg(activity.pid) over () as all_blockers_above\n    from activity, tree\n    where\n        not array[activity.pid] <@ tree.all_blockers_above\n      and activity.blocked_by <> '{}'::int[]\n      and activity.blocked_by <@ tree.path\n)\nselect\n    pid,\n    blocked_by,\n    case when wait_event_type != 'Lock' then replace(state, 'idle in transaction', 'idletx') else 'waiting' end as state,\n    wait_event_type || ':' || wait_event as wait,\n    wait_age,\n    tx_age,\n    --to_char(age(backend_xid), 'FM999,999,999,990') AS xid_age,\n    --to_char(2147483647 - age(backend_xmin), 'FM999,999,999,990') AS xmin_ttf,\n    usename,\n    datname,\n    (select count(distinct t1.pid) from tree t1 where array[tree.pid] <@ t1.path and t1.pid <> tree.pid) as blkd,\n    format(\n            '%s %s%s',\n            lpad('[' || pid::text || ']', 9, ' '),\n            repeat('.', level - 1) || case when level > 1 then ' ' end,\n            left(query, 1000)\n        ) as query\nfrom tree\norder by top_blocker_pid, level, pid",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Lock tree",
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Lock tree (unofficial)",
  "uid": "dd919736-2912-45a4-9c6b-b10b4f8ed36c",
  "version": 5,
  "weekStart": ""
}